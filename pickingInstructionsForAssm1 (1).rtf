{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240

\f0\fs24 \cf0 In the materials section, we uploaded a mouse-picking example that is useful and important to know. However, that method requires geometry already exists that you are trying to select, so it cannot be used when trying to click to create control points in the scene.\uc0\u8232 \u8232 Here is another way to do it, especially for Assignment 1. You can literally copy-paste the code below and use it directly. This method does not require any geometry to already exist in the scene. For future assignments, it might still be useful to consider using the original picking example that is posted in the materials section. =)\u8232 \u8232 \
\pard\pardeftab720

\f1 \cf0 //\
// (x,y) is the 2D mouse position received when glut\
// calls the mouse click callback.\
//\
// result is a 3-element array that returns the 3D point\
// where the mouse was clicked.\
//\
// Note that you may still want to double-check whether \
// the z-value is useful or if you should override it.\
//\
void pickFromXYPlane(Vector result, int x, int y)\
 \{\
        double modelView[16];\
        double projection[16];\
        int viewport[4];\
\
        double x1, y1, z1, x2, y2, z2;\
\
        glGetDoublev(GL_MODELVIEW_MATRIX, modelView);\
        glGetDoublev(GL_PROJECTION_MATRIX, projection);\
        glGetIntegerv(GL_VIEWPORT, viewport);\
\
        y = viewport[3] - y;\
        gluUnProject(x, y, 0, modelView, projection, viewport, &x1, &y1,\
 &z1);\
        gluUnProject(x, y, 1, modelView, projection, viewport, &x2, &y2,\
 &z2);\
\
        double t = z1 / (z1 - z2);\
\
        result[0] = (1 - t) * x1 + t * x2;\
        result[1] = (1 - t) * y1 + t * y2;\
        result[2] = 0;\
\
        double z = (1 - t) * z1 + t * z2;\
 \}\
}